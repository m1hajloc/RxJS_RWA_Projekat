(()=>{"use strict";var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};function e(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}function r(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function n(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,i=r.call(t),c=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)c.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return c}function o(t,e,r){if(r||2===arguments.length)for(var n,o=0,i=e.length;o<i;o++)!n&&o in e||(n||(n=Array.prototype.slice.call(e,0,o)),n[o]=e[o]);return t.concat(n||Array.prototype.slice.call(e))}function i(t){return"function"==typeof t}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var c,s=((c=function(t){var e;e=this,Error.call(e),e.stack=(new Error).stack,this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}).prototype=Object.create(Error.prototype),c.prototype.constructor=c,c);function u(t,e){if(t){var r=t.indexOf(e);0<=r&&t.splice(r,1)}}var a=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}var e;return t.prototype.unsubscribe=function(){var t,e,c,u,a;if(!this.closed){this.closed=!0;var l=this._parentage;if(l)if(this._parentage=null,Array.isArray(l))try{for(var h=r(l),d=h.next();!d.done;d=h.next())d.value.remove(this)}catch(e){t={error:e}}finally{try{d&&!d.done&&(e=h.return)&&e.call(h)}finally{if(t)throw t.error}}else l.remove(this);var p=this.initialTeardown;if(i(p))try{p()}catch(t){a=t instanceof s?t.errors:[t]}var v=this._finalizers;if(v){this._finalizers=null;try{for(var y=r(v),b=y.next();!b.done;b=y.next()){var w=b.value;try{f(w)}catch(t){a=null!=a?a:[],t instanceof s?a=o(o([],n(a)),n(t.errors)):a.push(t)}}}catch(t){c={error:t}}finally{try{b&&!b.done&&(u=y.return)&&u.call(y)}finally{if(c)throw c.error}}}if(a)throw new s(a)}},t.prototype.add=function(e){var r;if(e&&e!==this)if(this.closed)f(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(r=this._finalizers)&&void 0!==r?r:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&u(e,t)},t.prototype.remove=function(e){var r=this._finalizers;r&&u(r,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t}();function l(t){return t instanceof a||t&&"closed"in t&&i(t.remove)&&i(t.add)&&i(t.unsubscribe)}function f(t){i(t)?t():t.unsubscribe()}a.EMPTY;var h=function(t){function r(e,r){return t.call(this)||this}return e(r,t),r.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},r}(a),d={setInterval:function(t,e){for(var r=[],i=2;i<arguments.length;i++)r[i-2]=arguments[i];var c=d.delegate;return(null==c?void 0:c.setInterval)?c.setInterval.apply(c,o([t,e],n(r))):setInterval.apply(void 0,o([t,e],n(r)))},clearInterval:function(t){var e=d.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},p=function(t){function r(e,r){var n=t.call(this,e,r)||this;return n.scheduler=e,n.work=r,n.pending=!1,n}return e(r,t),r.prototype.schedule=function(t,e){var r;if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,o=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(o,n,e)),this.pending=!0,this.delay=e,this.id=null!==(r=this.id)&&void 0!==r?r:this.requestAsyncId(o,this.id,e),this},r.prototype.requestAsyncId=function(t,e,r){return void 0===r&&(r=0),d.setInterval(t.flush.bind(t,this),r)},r.prototype.recycleAsyncId=function(t,e,r){if(void 0===r&&(r=0),null!=r&&this.delay===r&&!1===this.pending)return e;null!=e&&d.clearInterval(e)},r.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var r=this._execute(t,e);if(r)return r;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},r.prototype._execute=function(t,e){var r,n=!1;try{this.work(t)}catch(t){n=!0,r=t||new Error("Scheduled action threw falsy error")}if(n)return this.unsubscribe(),r},r.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,r=this.scheduler,n=r.actions;this.work=this.state=this.scheduler=null,this.pending=!1,u(n,this),null!=e&&(this.id=this.recycleAsyncId(r,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},r}(h),v={now:function(){return(v.delegate||Date).now()},delegate:void 0},y=function(){function t(e,r){void 0===r&&(r=t.now),this.schedulerActionCtor=e,this.now=r}return t.prototype.schedule=function(t,e,r){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(r,e)},t.now=v.now,t}(),b=new(function(t){function r(e,r){void 0===r&&(r=y.now);var n=t.call(this,e,r)||this;return n.actions=[],n._active=!1,n}return e(r,t),r.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var r;this._active=!0;do{if(r=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,r){for(;t=e.shift();)t.unsubscribe();throw r}}},r}(y))(p),w=b,m=null,g=null,_=void 0,x=!1,S=!1,E={setTimeout:function(t,e){for(var r=[],i=2;i<arguments.length;i++)r[i-2]=arguments[i];var c=E.delegate;return(null==c?void 0:c.setTimeout)?c.setTimeout.apply(c,o([t,e],n(r))):setTimeout.apply(void 0,o([t,e],n(r)))},clearTimeout:function(t){var e=E.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function T(){}var A=I("C",void 0,void 0);function I(t,e,r){return{kind:t,value:e,error:r}}var C=null,O=function(t){function r(e){var r=t.call(this)||this;return r.isStopped=!1,e?(r.destination=e,l(e)&&e.add(r)):r.destination=M,r}return e(r,t),r.create=function(t,e,r){return new L(t,e,r)},r.prototype.next=function(t){this.isStopped?z(function(t){return I("N",t,void 0)}(t),this):this._next(t)},r.prototype.error=function(t){this.isStopped?z(I("E",void 0,t),this):(this.isStopped=!0,this._error(t))},r.prototype.complete=function(){this.isStopped?z(A,this):(this.isStopped=!0,this._complete())},r.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},r.prototype._next=function(t){this.destination.next(t)},r.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},r.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},r}(a),P=Function.prototype.bind;function k(t,e){return P.call(t,e)}var j=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){q(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){q(t)}else q(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){q(t)}},t}(),L=function(t){function r(e,r,n){var o,c,s=t.call(this)||this;return i(e)||!e?o={next:null!=e?e:void 0,error:null!=r?r:void 0,complete:null!=n?n:void 0}:s&&S?((c=Object.create(e)).unsubscribe=function(){return s.unsubscribe()},o={next:e.next&&k(e.next,c),error:e.error&&k(e.error,c),complete:e.complete&&k(e.complete,c)}):o=e,s.destination=new j(o),s}return e(r,t),r}(O);function q(t){var e;x?(e=t,x&&C&&(C.errorThrown=!0,C.error=e)):function(t){E.setTimeout((function(){if(!m)throw t;m(t)}))}(t)}function z(t,e){var r=g;r&&E.setTimeout((function(){return r(t,e)}))}var M={closed:!0,next:T,error:function(t){throw t},complete:T},H="function"==typeof Symbol&&Symbol.observable||"@@observable";function U(t){return t}var F=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var r=new t;return r.source=this,r.operator=e,r},t.prototype.subscribe=function(t,e,r){var n,o=this,c=(n=t)&&n instanceof O||function(t){return t&&i(t.next)&&i(t.error)&&i(t.complete)}(n)&&l(n)?t:new L(t,e,r);return function(t){if(x){var e=!C;if(e&&(C={errorThrown:!1,error:null}),t(),e){var r=C,n=r.errorThrown,o=r.error;if(C=null,n)throw o}}else t()}((function(){var t=o,e=t.operator,r=t.source;c.add(e?e.call(c,r):r?o._subscribe(c):o._trySubscribe(c))})),c},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var r=this;return new(e=N(e))((function(e,n){var o=new L({next:function(e){try{t(e)}catch(t){n(t),o.unsubscribe()}},error:n,complete:e});r.subscribe(o)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[H]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0===(r=t).length?U:1===r.length?r[0]:function(t){return r.reduce((function(t,e){return e(t)}),t)})(this);var r},t.prototype.toPromise=function(t){var e=this;return new(t=N(t))((function(t,r){var n;e.subscribe((function(t){return n=t}),(function(t){return r(t)}),(function(){return t(n)}))}))},t.create=function(e){return new t(e)},t}();function N(t){var e;return null!==(e=null!=t?t:_)&&void 0!==e?e:Promise}var Y=function(t){function r(e,r,n,o,i,c){var s=t.call(this,e)||this;return s.onFinalize=i,s.shouldUnsubscribe=c,s._next=r?function(t){try{r(t)}catch(t){e.error(t)}}:t.prototype._next,s._error=o?function(t){try{o(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,s._complete=n?function(){try{n()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,s}return e(r,t),r.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var r=this.closed;t.prototype.unsubscribe.call(this),!r&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},r}(O);function B(t,e){return r=function(r,n){var o=0;r.subscribe(new Y(n,(function(r){n.next(t.call(e,r,o++))}),void 0,void 0,void 0))},function(t){if(function(t){return i(null==t?void 0:t.lift)}(t))return t.lift((function(t){try{return r(t,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")};var r}var D="http://localhost:3000/questions/";console.log(D);var G,J,K,Q=(void 0===(G=1e3)&&(G=0),void 0===J&&(J=b),G<0&&(G=0),function(t,e,r){void 0===t&&(t=0),void 0===r&&(r=w);var n,o=-1;return null!=e&&((n=e)&&i(n.schedule)?r=e:o=e),new F((function(e){var n=function(t){return t instanceof Date&&!isNaN(t)}(t)?+t-r.now():t;n<0&&(n=0);var i=0;return r.schedule((function(){e.closed||(e.next(i++),0<=o?this.schedule(void 0,o):e.complete())}),n)}))}(G,G,J)),R=document.querySelector(".timer"),V=document.querySelector(".question"),W=document.querySelectorAll(".answer-button"),X=document.querySelector(".progress-bar"),Z=document.querySelector(".start-button"),$=document.getElementById("current-score"),tt=document.getElementById("highscore"),et=0,rt=0,nt=0,ot=[],it=0;function ct(t){R.innerHTML="10",X.style.width="100%",K=Q.pipe(B((function(t){return 9-t}))).subscribe((function(t){if(t>=0){R.innerHTML=(t+1).toString();var e=t/10*100;X.style.width="".concat(e,"%")}else R.innerHTML="0",W.forEach((function(t){t.disabled=!0,t.textContent===ot[it].tacanodgovor&&t.classList.add("correct-not-answered")})),K&&K.unsubscribe(),setTimeout((function(){W.forEach((function(t){t.classList.remove("correct-not-answered"),t.disabled=!1})),st()}),2e3)})),V.textContent=t.pitanje,W[0].textContent=t.a,W[1].textContent=t.b,W[2].textContent=t.c,W[3].textContent=t.d}function st(){it<ot.length-1?(it++,ct(ot[it])):(nt<rt&&(nt=rt,tt.textContent=nt.toString()),Z.style.visibility="visible",alert("Your Score is: "+rt+"\nIf you want to try again click button Play again!"),W.forEach((function(t){t.disabled=!0})))}Z.addEventListener("click",(function(){var t;rt=0,it=0,$.textContent="0",W.forEach((function(t){t.disabled=!1})),(t=D,fetch(t).then((function(t){if(!t.ok)throw new Error("HTTP error! Status: ".concat(t.status));return t.json()})).then((function(t){return t})).catch((function(t){console.error("Greska prilikoom fatchovanja:",t)}))).then((function(t){for(var e=0;e<5;e++)ot[e]=t[Math.round(25*Math.random())];Z.style.visibility="hidden",Z.textContent="Play Again",function(){if(0==et)for(var t=function(t){var e=W[t];e.addEventListener("click",(function(){return function(t){console.log(t.textContent),console.log(ot[it].tacanodgovor),t.textContent===ot[it].tacanodgovor?(rt+=parseInt(R.innerHTML),$.textContent=rt.toString(),t.classList.add("correct")):(rt-=5,$.textContent=rt.toString(),t.classList.add("wrong"),W.forEach((function(t){t.textContent===ot[it].tacanodgovor&&t.classList.add("correct-not-answered")}))),W.forEach((function(t){t.disabled=!0})),K&&K.unsubscribe(),setTimeout((function(){W.forEach((function(t){t.classList.remove("correct","correct-not-answered","wrong"),t.disabled=!1})),st()}),2e3)}(e)}))},e=0;e<4;e++)t(e);et++}(),ct(ot[0])}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,