(()=>{"use strict";var t=function(r,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var e in r)Object.prototype.hasOwnProperty.call(r,e)&&(t[e]=r[e])},t(r,e)};function r(r,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=r}t(r,e),r.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function e(t){var r="function"==typeof Symbol&&Symbol.iterator,e=r&&t[r],n=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")}function n(t,r){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var n,o,i=e.call(t),c=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)c.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return c}function o(t,r,e){if(e||2===arguments.length)for(var n,o=0,i=r.length;o<i;o++)!n&&o in r||(n||(n=Array.prototype.slice.call(r,0,o)),n[o]=r[o]);return t.concat(n||Array.prototype.slice.call(r))}function i(t){return"function"==typeof t}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var c,s=((c=function(t){var r;r=this,Error.call(r),r.stack=(new Error).stack,this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,r){return r+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}).prototype=Object.create(Error.prototype),c.prototype.constructor=c,c);function u(t,r){if(t){var e=t.indexOf(r);0<=e&&t.splice(e,1)}}var a=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}var r;return t.prototype.unsubscribe=function(){var t,r,c,u,a;if(!this.closed){this.closed=!0;var l=this._parentage;if(l)if(this._parentage=null,Array.isArray(l))try{for(var h=e(l),p=h.next();!p.done;p=h.next())p.value.remove(this)}catch(r){t={error:r}}finally{try{p&&!p.done&&(r=h.return)&&r.call(h)}finally{if(t)throw t.error}}else l.remove(this);var d=this.initialTeardown;if(i(d))try{d()}catch(t){a=t instanceof s?t.errors:[t]}var v=this._finalizers;if(v){this._finalizers=null;try{for(var y=e(v),b=y.next();!b.done;b=y.next()){var w=b.value;try{f(w)}catch(t){a=null!=a?a:[],t instanceof s?a=o(o([],n(a)),n(t.errors)):a.push(t)}}}catch(t){c={error:t}}finally{try{b&&!b.done&&(u=y.return)&&u.call(y)}finally{if(c)throw c.error}}}if(a)throw new s(a)}},t.prototype.add=function(r){var e;if(r&&r!==this)if(this.closed)f(r);else{if(r instanceof t){if(r.closed||r._hasParent(this))return;r._addParent(this)}(this._finalizers=null!==(e=this._finalizers)&&void 0!==e?e:[]).push(r)}},t.prototype._hasParent=function(t){var r=this._parentage;return r===t||Array.isArray(r)&&r.includes(t)},t.prototype._addParent=function(t){var r=this._parentage;this._parentage=Array.isArray(r)?(r.push(t),r):r?[r,t]:t},t.prototype._removeParent=function(t){var r=this._parentage;r===t?this._parentage=null:Array.isArray(r)&&u(r,t)},t.prototype.remove=function(r){var e=this._finalizers;e&&u(e,r),r instanceof t&&r._removeParent(this)},t.EMPTY=((r=new t).closed=!0,r),t}();function l(t){return t instanceof a||t&&"closed"in t&&i(t.remove)&&i(t.add)&&i(t.unsubscribe)}function f(t){i(t)?t():t.unsubscribe()}a.EMPTY;var h=function(t){function e(r,e){return t.call(this)||this}return r(e,t),e.prototype.schedule=function(t,r){return void 0===r&&(r=0),this},e}(a),p={setInterval:function(t,r){for(var e=[],i=2;i<arguments.length;i++)e[i-2]=arguments[i];var c=p.delegate;return(null==c?void 0:c.setInterval)?c.setInterval.apply(c,o([t,r],n(e))):setInterval.apply(void 0,o([t,r],n(e)))},clearInterval:function(t){var r=p.delegate;return((null==r?void 0:r.clearInterval)||clearInterval)(t)},delegate:void 0},d=function(t){function e(r,e){var n=t.call(this,r,e)||this;return n.scheduler=r,n.work=e,n.pending=!1,n}return r(e,t),e.prototype.schedule=function(t,r){var e;if(void 0===r&&(r=0),this.closed)return this;this.state=t;var n=this.id,o=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(o,n,r)),this.pending=!0,this.delay=r,this.id=null!==(e=this.id)&&void 0!==e?e:this.requestAsyncId(o,this.id,r),this},e.prototype.requestAsyncId=function(t,r,e){return void 0===e&&(e=0),p.setInterval(t.flush.bind(t,this),e)},e.prototype.recycleAsyncId=function(t,r,e){if(void 0===e&&(e=0),null!=e&&this.delay===e&&!1===this.pending)return r;null!=r&&p.clearInterval(r)},e.prototype.execute=function(t,r){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(t,r);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,r){var e,n=!1;try{this.work(t)}catch(t){n=!0,e=t||new Error("Scheduled action threw falsy error")}if(n)return this.unsubscribe(),e},e.prototype.unsubscribe=function(){if(!this.closed){var r=this.id,e=this.scheduler,n=e.actions;this.work=this.state=this.scheduler=null,this.pending=!1,u(n,this),null!=r&&(this.id=this.recycleAsyncId(e,r,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},e}(h),v={now:function(){return(v.delegate||Date).now()},delegate:void 0},y=function(){function t(r,e){void 0===e&&(e=t.now),this.schedulerActionCtor=r,this.now=e}return t.prototype.schedule=function(t,r,e){return void 0===r&&(r=0),new this.schedulerActionCtor(this,t).schedule(e,r)},t.now=v.now,t}(),b=new(function(t){function e(r,e){void 0===e&&(e=y.now);var n=t.call(this,r,e)||this;return n.actions=[],n._active=!1,n}return r(e,t),e.prototype.flush=function(t){var r=this.actions;if(this._active)r.push(t);else{var e;this._active=!0;do{if(e=t.execute(t.state,t.delay))break}while(t=r.shift());if(this._active=!1,e){for(;t=r.shift();)t.unsubscribe();throw e}}},e}(y))(d),w=b,m=null,g=null,_=void 0,x=!1,S=!1,T={setTimeout:function(t,r){for(var e=[],i=2;i<arguments.length;i++)e[i-2]=arguments[i];var c=T.delegate;return(null==c?void 0:c.setTimeout)?c.setTimeout.apply(c,o([t,r],n(e))):setTimeout.apply(void 0,o([t,r],n(e)))},clearTimeout:function(t){var r=T.delegate;return((null==r?void 0:r.clearTimeout)||clearTimeout)(t)},delegate:void 0};function E(){}var A=O("C",void 0,void 0);function O(t,r,e){return{kind:t,value:r,error:e}}var I=null,C=function(t){function e(r){var e=t.call(this)||this;return e.isStopped=!1,r?(e.destination=r,l(r)&&r.add(e)):e.destination=M,e}return r(e,t),e.create=function(t,r,e){return new z(t,r,e)},e.prototype.next=function(t){this.isStopped?q(function(t){return O("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?q(O("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?q(A,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(a),P=Function.prototype.bind;function j(t,r){return P.call(t,r)}var k=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var r=this.partialObserver;if(r.next)try{r.next(t)}catch(t){L(t)}},t.prototype.error=function(t){var r=this.partialObserver;if(r.error)try{r.error(t)}catch(t){L(t)}else L(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){L(t)}},t}(),z=function(t){function e(r,e,n){var o,c,s=t.call(this)||this;return i(r)||!r?o={next:null!=r?r:void 0,error:null!=e?e:void 0,complete:null!=n?n:void 0}:s&&S?((c=Object.create(r)).unsubscribe=function(){return s.unsubscribe()},o={next:r.next&&j(r.next,c),error:r.error&&j(r.error,c),complete:r.complete&&j(r.complete,c)}):o=r,s.destination=new k(o),s}return r(e,t),e}(C);function L(t){var r;x?(r=t,x&&I&&(I.errorThrown=!0,I.error=r)):function(t){T.setTimeout((function(){if(!m)throw t;m(t)}))}(t)}function q(t,r){var e=g;e&&T.setTimeout((function(){return e(t,r)}))}var M={closed:!0,next:E,error:function(t){throw t},complete:E},U="function"==typeof Symbol&&Symbol.observable||"@@observable";function F(t){return t}var H=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(r){var e=new t;return e.source=this,e.operator=r,e},t.prototype.subscribe=function(t,r,e){var n,o=this,c=(n=t)&&n instanceof C||function(t){return t&&i(t.next)&&i(t.error)&&i(t.complete)}(n)&&l(n)?t:new z(t,r,e);return function(t){if(x){var r=!I;if(r&&(I={errorThrown:!1,error:null}),t(),r){var e=I,n=e.errorThrown,o=e.error;if(I=null,n)throw o}}else t()}((function(){var t=o,r=t.operator,e=t.source;c.add(r?r.call(c,e):e?o._subscribe(c):o._trySubscribe(c))})),c},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(r){t.error(r)}},t.prototype.forEach=function(t,r){var e=this;return new(r=N(r))((function(r,n){var o=new z({next:function(r){try{t(r)}catch(t){n(t),o.unsubscribe()}},error:n,complete:r});e.subscribe(o)}))},t.prototype._subscribe=function(t){var r;return null===(r=this.source)||void 0===r?void 0:r.subscribe(t)},t.prototype[U]=function(){return this},t.prototype.pipe=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return(0===(e=t).length?F:1===e.length?e[0]:function(t){return e.reduce((function(t,r){return r(t)}),t)})(this);var e},t.prototype.toPromise=function(t){var r=this;return new(t=N(t))((function(t,e){var n;r.subscribe((function(t){return n=t}),(function(t){return e(t)}),(function(){return t(n)}))}))},t.create=function(r){return new t(r)},t}();function N(t){var r;return null!==(r=null!=t?t:_)&&void 0!==r?r:Promise}var D=function(t){function e(r,e,n,o,i,c){var s=t.call(this,r)||this;return s.onFinalize=i,s.shouldUnsubscribe=c,s._next=e?function(t){try{e(t)}catch(t){r.error(t)}}:t.prototype._next,s._error=o?function(t){try{o(t)}catch(t){r.error(t)}finally{this.unsubscribe()}}:t.prototype._error,s._complete=n?function(){try{n()}catch(t){r.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,s}return r(e,t),e.prototype.unsubscribe=function(){var r;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var e=this.closed;t.prototype.unsubscribe.call(this),!e&&(null===(r=this.onFinalize)||void 0===r||r.call(this))}},e}(C);function Y(t,r){return e=function(e,n){var o=0;e.subscribe(new D(n,(function(e){n.next(t.call(r,e,o++))}),void 0,void 0,void 0))},function(t){if(function(t){return i(null==t?void 0:t.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")};var e}var G="http://localhost:3000/questions/";console.log(G);var Q,W,B,J,K=(void 0===(Q=1e3)&&(Q=0),void 0===W&&(W=b),Q<0&&(Q=0),function(t,r,e){void 0===t&&(t=0),void 0===e&&(e=w);var n,o=-1;return null!=r&&((n=r)&&i(n.schedule)?e=r:o=r),new H((function(r){var n=function(t){return t instanceof Date&&!isNaN(t)}(t)?+t-e.now():t;n<0&&(n=0);var i=0;return e.schedule((function(){r.closed||(r.next(i++),0<=o?this.schedule(void 0,o):r.complete())}),n)}))}(Q,Q,W)),R=document.querySelector(".timer"),V=document.querySelector(".question"),X=document.querySelectorAll(".answer-button"),Z=document.querySelector(".progress-bar"),$=[],tt=0;function rt(t){R.innerHTML="10",Z.style.width="100%",B=K.pipe(Y((function(t){return 9-t}))).subscribe((function(t){if(t>=0){R.innerHTML=t.toString();var r=t/10*100;Z.style.width="".concat(r,"%")}else R.innerHTML="0",X.forEach((function(t){t.disabled=!0,t.textContent===$[tt].tacanodgovor&&t.classList.add("correct-not-answered")})),B&&B.unsubscribe(),setTimeout((function(){X.forEach((function(t){t.classList.remove("correct-not-answered"),t.disabled=!1})),et()}),2e3)})),V.textContent=t.pitanje,X[0].textContent=t.a,X[1].textContent=t.b,X[2].textContent=t.c,X[3].textContent=t.d}function et(){tt<$.length-1?(tt++,rt($[tt])):console.log("Quiz Finished")}(J=G,fetch(J).then((function(t){if(!t.ok)throw new Error("HTTP error! Status: ".concat(t.status));return t.json()})).then((function(t){return t})).catch((function(t){console.error("Greska prilikoom fatchovanja:",t)}))).then((function(t){for(var r=0;r<5;r++)$[r]=t[Math.round(12*Math.random())];(function(){for(var t=function(t){var r=X[t];r.addEventListener("click",(function(){return function(t){console.log(t.textContent),console.log($[tt].tacanodgovor),t.textContent===$[tt].tacanodgovor?(console.log("Correct answer!"),t.classList.add("correct")):(console.log("Wrong answer."),t.classList.add("wrong")),X.forEach((function(t){t.disabled=!0})),B&&B.unsubscribe(),setTimeout((function(){X.forEach((function(t){t.classList.remove("correct","wrong"),t.disabled=!1})),et()}),2e3)}(r)}))},r=0;r<4;r++)t(r)})(),rt($[0])}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,